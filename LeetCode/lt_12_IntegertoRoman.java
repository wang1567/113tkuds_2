public class lt_12_IntegertoRoman {
    public String intToRoman(int num) {
        // 定義所有可能的羅馬數字組合，按照數值從大到小排列
        // 包含基本符號和減法形式的特殊組合
        int[] values = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };
        String[] symbols = { "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I" };

        StringBuilder result = new StringBuilder();

        // 從最大的數值開始，依序處理每個羅馬數字
        for (int i = 0; i < values.length; i++) {
            // 計算當前數值可以被減去多少次
            int count = num / values[i];

            // 將對應的羅馬數字符號重複添加 count 次
            for (int j = 0; j < count; j++) {
                result.append(symbols[i]);
            }

            // 更新剩餘的數值
            num %= values[i];

            // 如果數值已經為0，可以提前結束
            if (num == 0) {
                break;
            }
        }

        return result.toString();
    }
}

/*
 * 解題邏輯與思路說明：
 * 
 * 1. 問題理解：
 * - 將阿拉伯數字轉換為羅馬數字
 * - 羅馬數字有基本符號：I(1), V(5), X(10), L(50), C(100), D(500), M(1000)
 * - 特殊的減法形式：IV(4), IX(9), XL(40), XC(90), CD(400), CM(900)
 * - 需要遵循從大到小、不超過3個相同符號連續的規則
 * 
 * 2. 核心策略 - 貪心算法：
 * - 創建一個包含所有可能數值的陣列，按照從大到小排序
 * - 包含基本符號對應的數值和減法形式的特殊數值
 * - 對於每個數值，盡可能多地使用對應的羅馬數字符號
 * 
 * 3. 為什麼這種方法有效：
 * a) 貪心選擇：每次都選擇不超過當前數字的最大羅馬數字
 * b) 最優子結構：轉換剩餘數字的最優解包含在整體最優解中
 * c) 覆蓋所有特殊情況：預先定義了所有減法形式，避免出現4個相同符號
 * 
 * 4. 算法步驟詳解：
 * Step 1: 建立數值和符號的對應陣列（從大到小）
 * Step 2: 遍歷每個數值，計算能使用多少次對應的符號
 * Step 3: 將符號加入結果字串，更新剩餘數值
 * Step 4: 重複直到數值變為0
 * 
 * 5. 舉例說明 num = 3749：
 * - 3749 ÷ 1000 = 3, 加入"MMM", 剩餘749
 * - 749 ÷ 500 = 1, 加入"D", 剩餘249
 * - 249 ÷ 100 = 2, 加入"CC", 剩餘49
 * - 49 ÷ 40 = 1, 加入"XL", 剩餘9
 * - 9 ÷ 9 = 1, 加入"IX", 剩餘0
 * - 最終結果："MMMDCCXLIX"
 * 
 * 6. 時間與空間複雜度：
 * - 時間複雜度：O(1) - 最多處理13個不同的數值，每個數值最多使用3次
 * - 空間複雜度：O(1) - 使用固定大小的陣列
 * 
 * 7. 邊界情況處理：
 * - num = 1: "I"
 * - num = 4: "IV" (不會是"IIII")
 * - num = 3999: "MMMCMXCIX" (題目範圍內的最大值)
 * 
 * 8. 關鍵洞察：
 * - 預先定義所有減法形式避免了複雜的條件判斷
 * - 貪心策略保證了結果的正確性和符號使用的最少性
 * - 從大到小的順序確保了羅馬數字的標準格式
 */